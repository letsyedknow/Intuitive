3.A.--Find the top3 fastest-speed bird associated with Wingspan, food-token and habitat(s).

select b.* from (select bird_id,bird_name,food_token_id,habitat_id,wingspan,dense_rank() over(partition by food_token_id,habitat_id order by wingspan desc) as bird_rank from bird   ) b where b.bird_rank=1 ;


3.B.--DUPLICATES BASED ON BIRD_NAME,FOOD AND HABITAT 

select b.* from bird b 
join (select bird_name,food_token_id,habitat_id,count(1) from bird group by 1,2,3 having count(1)>=2  ) d 
on b.bird_name=d.bird_name;



3.C.---TOTAL_POINT AND CREDIT AFTER THE GAME CONSIDERING ALL PLAYER PLAYED TILL END
SELECT AR.GAME_ID,AR.USER_ID,SUM(AR.LAST_POINTS) AS TOTAL_POINTS,DENSE_RANK() OVER (ORDER BY SUM(AR.LAST_POINTS) DESC ) AS CREDIT_RANK 
FROM
( --SUM OF POINTS AFTER EACH ROUND
SELECT G.GAME_ID,G.ROUND,G.USER_ID,SUM(B.POINT) AS LAST_POINTS 
			   FROM (SELECT GAME_ID,ROUND,USER_ID,UNNEST(CARD_IN_HAND) AS CARD_ASSET_ID 
			               FROM GAME WHERE GAME_ID IN (
                               --CONSIDERING THE LATEST COMPLETED GAME 
                               SELECT MAX(GAME_ID) FROM GAME WHERE IS_COMPLETED=TRUE
                           ) ) G
JOIN BIRD B
ON G.CARD_ASSET_ID=B.CARD_ASSET_ID
GROUP BY 1,2,3
) AR
GROUP BY 1,2;	

2.E. 
-----INSERT THE TABLE AFTER THE GAME END
INSERT INTO USERS(USER_ID,USER_NAME,GAME_ID,LAST_POINTS,TOTAL_POINTS,CREDIT,LAST_LOGIN_TS)
-----TOTAL_POINT AND CREDIT AFTER THE EACH GAME WITH AUTO SUM OF ALL PLAYER
SELECT AF.USER_ID,U.USER_NAME,AF.GAME_ID,
       AF.TOTAL_POINTS AS LAST_POINTS,
       U.PREVIOUS_POINT+AF.TOTAL_POINTS AS TOTAL_POINTS,
       DENSE_RANK() OVER (ORDER BY (U.PREVIOUS_POINT+AF.TOTAL_POINTS) DESC ) AS CREDIT,CURRENT_TIMESTAMP
FROM 
(---TOTAL_POINT AND CREDIT AFTER THE EACH GAME CONSIDERING ALL PLAYER PLAYED TILL END
SELECT AR.GAME_ID,AR.USER_ID,SUM(AR.LAST_POINTS) AS TOTAL_POINTS,DENSE_RANK() OVER (ORDER BY SUM(AR.LAST_POINTS) DESC ) AS CREDIT_RANK 
FROM
( --SUM OF POINTS AFTER EACH ROUND
SELECT G.GAME_ID,G.ROUND,G.USER_ID,SUM(B.POINT) AS LAST_POINTS 
			   FROM (SELECT GAME_ID,ROUND,USER_ID,UNNEST(CARD_IN_HAND) AS CARD_ASSET_ID --STORED AS AN ARRAY TO REDUCE REDUNDENCY
			               FROM GAME WHERE GAME_ID IN (
                               --CONSIDERING THE LATEST COMPLETED GAME 
                               SELECT MAX(GAME_ID) FROM GAME WHERE IS_COMPLETED=TRUE
                           ) ) G
JOIN BIRD B
ON G.CARD_ASSET_ID=B.CARD_ASSET_ID
GROUP BY 1,2,3
) AR
GROUP BY 1,2) AF
JOIN (SELECT USER_ID,USER_NAME,MAX(TOTAL_POINTS) AS PREVIOUS_POINT FROM USERS GROUP BY 1,2 )U 
ON AF.USER_ID=U.USER_ID;


---VIEW CREATED FOR FETCHING THE LATEST STATUS
CREATE VIEW USERS_STATUS AS
SELECT A.* FROM USERS A
JOIN (SELECT USER_ID,MAX(GAME_ID) AS GAME_ID FROM USERS GROUP BY 1) B
ON A.USER_ID=B.USER_ID
AND A.GAME_ID=B.GAME_ID
ORDER BY A.CREDIT;

---SELECT VIEW FOR LATEST CREDIT
SELECT * FROM USERS_STATUS;